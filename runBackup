#!/bin/bash -x

## This script uses rsync to incrementally backup from Synology NAS 

SYNOLOGY_HOST=192.168.1.7
SYNOLOGY_USER=admin

LOCAL_FILESTORE=/var/backups/synology

## The marker file tells root when to initiate shutdown
rm -f /tmp/shutdown.marker

RTC_START=`date +%c -d11:45`
NOW_START=`date +%c`
TIMEDIFF=`printf "%s\n" $(( $(date -d "$NOW_START" "+%s") - $(date -d "$RTC_START" "+%s") ))`

echo "Seconds since assumed RTC wakeup: "$TIMEDIFF
echo "Running as user: `whoami`"

MODE=$1

TMPDIR=`mktemp -d`
FILE_WORKSIZE=$TMPDIR/rsync-worksize	## The initial dry run estimate of work
FILE_PROGRESS=$TMPDIR/rsync-progress	## The progress output from rsync

UNATTENDED=false
##if [ `cut -f1 /proc/uptime -d'.'` -lt 180 -a "$PARAM" != "manual" ]; then 
if [ "$TIMEDIFF" -lt 900 -a "$TIMEDIFF" -ge 0 -a "$MODE" != "manual" ]; then 
  ## Less than 15 minutes since the RTC start time and the boot flag was passed, so
  ## assume this was started from cron boot entry and system started via RTC timer
  MODE=automatic
  echo "Script starting due to RTC wakeup; scheduling shutdown in 60 minutes or on completion if sooner"
  ## Prepare a background task to shutdown in 60 minutes
  (nohup sleep 3600; touch /tmp/shutdown.marker) &
fi

#export RSYNC_PASSWORD=<password>

spawnProgressReporting() {
  ## Progress reporter - background task
  (
  while true; do
    if [ -f "$FILE_WORKSIZE" -a -f "$FILE_PROGRESS" ]; then
      #INITIAL_WORKSIZE=`grep "xfr#" $FILE_WORKSIZE | tail -1 | cut -f1 -d' ' | tr -d ',' | tr -d ' '`
      INITIAL_WORKSIZE=`grep "xfr#" $FILE_WORKSIZE | tail -1 | sed -e 's/^ *//g' | sed -e 's/ .*$//g' | tr -d ','`
      ##PROCESSED_WORKSIZE=`grep "xfr#" $FILE_PROGRESS | tail -1 | cut -f1 -d' ' | tr -d ',' | tr -d ' '`
      PROCESSED_WORKSIZE=`grep "xfr#" $FILE_PROGRESS | tail -1 | sed -e 's/^ *//g' | sed -e 's/ .*$//g' | tr -d ','`
      REMAINING_WORKSIZE=$(( INITIAL_WORKSIZE - PROCESSED_WORKSIZE ))  
      REMAINING_WORKSIZE=$(( REMAINING_WORKSIZE > 0 ? REMAINING_WORKSIZE : 0 ))  
      echo "Reporting: INITIAL: [$INITIAL_WORKSIZE] PROCESSED: [$PROCESSED_WORKSIZE] REMAINING: [$REMAINING_WORKSIZE]"
      echo -n "backatron.workload.remaining:$REMAINING_WORKSIZE|g|#workload" | nc -4u -w1 localhost 8125
    else
      echo "Not reporting stats as rsync outputs not found yet"
    fi
    sleep 15
  done
  ) &
  REPORTER_PID=$!
}

doSync() {
  ##  Get size of required transfers
  SOURCEPATHS=`eval echo "$SYNOLOGY_USER@$SYNOLOGY_HOST:/volume1/$VOLUME"`
  rsync --dry-run -ar --delete --info=progress2 -e "/usr/bin/ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null" $SOURCEPATHS $LOCAL_FILESTORE | tr '\r' '\n' > $FILE_WORKSIZE
  ## Now do actual sync
  rsync -ar --delete --info=progress2 -e "/usr/bin/ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null" $SOURCEPATHS $LOCAL_FILESTORE | tr '\r' '\n' > $FILE_PROGRESS
}

spawnProgressReporting

#VOLUME={Steve2,homes,Steve,web,photo,Natalie}
VOLUME={Steve2,homes,web,photo,Natalie,Steve,video,git,gitea}
doSync

if [ "$MODE" = "automatic" ]; then
  ## Initiate shutdown
  touch /tmp/shutdown.marker
fi

kill $REPORTER_PID
 
exit 0
